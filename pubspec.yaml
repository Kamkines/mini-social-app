# Это главный файл проекта для зависимостей и настроек.
# Тут же можно устанавливать куда смотреть в плане assets-файлов (шрифты, статичные изображения, видео и т.п.), надо явно тут показывать на assets, иначе не поймет сборщик, что это надо.

# Тестировать приложение в режиме "реального" времени (hot reload) можно с помощью Android Studio (некий аналог VS Code) и с помощью других эмуляторов с помощью (ADB). 

# ADB (Android Debug Bridge) — это инструмент, который позволяет компьютеру «общаться» с Android-устройствами (физическими или эмуляторами).
# Для того чтобы ADB работало, надо чтобы на компьютере был Android SDK.
# Устанавливается либо вместе с Android Studio, либо через "боль", а именно для него нужны JAVA (а именно JDK) и "Только инструменты командной строки".

# Очень простое объяснение, как это работает:
# 1) с помощью adb connect мы говорим компу, чтобы он подключил мой включенный эмулятор к нему. (adb devices)
# 2) Ты увидишь эмулятор подключенный к компу (flutter devices) в возможностях подключения  при тестировании (flutter run).

# Для сборки и тестирования важны файлы build.gradle.kts:
# 1) тот что build.gradle.kts в папке android — управляет настройками всего проекта. 
# Он говорит, какие инструменты (плагины) использовать для сборки приложения, какие версии библиотек (зависимости) нужны для работы.
# 2) тот что build.gradle.kts в папке app — управляет настройками только для  Android-части твоего приложения. Здесь указываются определенные настройки, 
# например:
# - какая версия Android SDK должна использоваться;
# - какие библиотеки нужны для самой Android-части;
# - настройки, чтобы приложение правильно собиралось и запускалось на Android-устройствах.

name: mini_social_app
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev
#pub.dev - это место, где люди выкладывают библиотеки и пакеты Flutter/Dart (например, как NPM).

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.7.2

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies: # установка зависимостей
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  firebase_auth: ^5.5.3
  firebase_core: ^3.13.0
  cloud_firestore: ^5.6.7

dev_dependencies: # установка зависимостей для разработки
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package


